{"ast":null,"code":"import getConfig from 'next/config';\nimport Airtable from 'airtable';\nimport { verify } from 'jsonwebtoken';\nconst {\n  serverRuntimeConfig\n} = getConfig();\nexport default (async (req, res) => {\n  const {\n    jwt,\n    id,\n    state\n  } = req.body;\n  const {\n    base,\n    table,\n    initialState,\n    resultStates,\n    track\n  } = verify(jwt, serverRuntimeConfig.appSecret);\n  const at = new Airtable({\n    apiKey: serverRuntimeConfig.airtableKey\n  }).base(base)(table);\n  if (!resultStates.split(',').includes(state)) throw new Error(`${state} is not an allowed state.`);\n  const record = await at.find(id);\n  if (record.fields.Status !== initialState) throw new Error(`Application is ${record.fields.State}, not ${initialState}.`);\n  if (record.fields.Track !== track) throw new Error(`Entry is not in the ${track} Track`);\n  at.update([{\n    id,\n    fields: {\n      status: state\n    }\n  }]);\n  res.send('ok');\n});","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/api/judge-entry.js"],"names":["getConfig","Airtable","verify","serverRuntimeConfig","req","res","jwt","id","state","body","base","table","initialState","resultStates","track","appSecret","at","apiKey","airtableKey","split","includes","Error","record","find","fields","Status","State","Track","update","status","send"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BH,SAAS,EAAzC;AAEA,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,EAAP;AAAWC,IAAAA;AAAX,MAAqBJ,GAAG,CAACK,IAA/B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,YAA7B;AAA2CC,IAAAA;AAA3C,MAAqDZ,MAAM,CAACI,GAAD,EAAMH,mBAAmB,CAACY,SAA1B,CAAjE;AACA,QAAMC,EAAE,GAAG,IAAIf,QAAJ,CAAa;AAAEgB,IAAAA,MAAM,EAAEd,mBAAmB,CAACe;AAA9B,GAAb,EAA0DR,IAA1D,CAA+DA,IAA/D,EAAqEC,KAArE,CAAX;AAEA,MAAI,CAACE,YAAY,CAACM,KAAb,CAAmB,GAAnB,EAAwBC,QAAxB,CAAiCZ,KAAjC,CAAL,EAA8C,MAAM,IAAIa,KAAJ,CAAW,GAAEb,KAAM,2BAAnB,CAAN;AAE9C,QAAMc,MAAM,GAAG,MAAMN,EAAE,CAACO,IAAH,CAAQhB,EAAR,CAArB;AACA,MAAIe,MAAM,CAACE,MAAP,CAAcC,MAAd,KAAyBb,YAA7B,EAA2C,MAAM,IAAIS,KAAJ,CAAW,kBAAiBC,MAAM,CAACE,MAAP,CAAcE,KAAM,SAAQd,YAAa,GAArE,CAAN;AAC3C,MAAIU,MAAM,CAACE,MAAP,CAAcG,KAAd,KAAwBb,KAA5B,EAAmC,MAAM,IAAIO,KAAJ,CAAW,uBAAsBP,KAAM,QAAvC,CAAN;AAEnCE,EAAAA,EAAE,CAACY,MAAH,CAAU,CAAC;AACTrB,IAAAA,EADS;AAETiB,IAAAA,MAAM,EAAE;AAAEK,MAAAA,MAAM,EAAErB;AAAV;AAFC,GAAD,CAAV;AAKAH,EAAAA,GAAG,CAACyB,IAAJ,CAAS,IAAT;AACD,CAjBD","sourcesContent":["import getConfig from 'next/config';\nimport Airtable from 'airtable';\nimport { verify } from 'jsonwebtoken';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport default async (req, res) => {\n  const { jwt, id, state } = req.body;\n  const { base, table, initialState, resultStates, track } = verify(jwt, serverRuntimeConfig.appSecret);\n  const at = new Airtable({ apiKey: serverRuntimeConfig.airtableKey }).base(base)(table);\n\n  if (!resultStates.split(',').includes(state)) throw new Error(`${state} is not an allowed state.`);\n\n  const record = await at.find(id);\n  if (record.fields.Status !== initialState) throw new Error(`Application is ${record.fields.State}, not ${initialState}.`);\n  if (record.fields.Track !== track) throw new Error(`Entry is not in the ${track} Track`);\n\n  at.update([{\n    id,\n    fields: { status: state },\n  }]);\n\n  res.send('ok');\n}\n"]},"metadata":{},"sourceType":"module"}