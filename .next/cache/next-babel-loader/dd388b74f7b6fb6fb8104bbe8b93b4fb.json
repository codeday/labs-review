{"ast":null,"code":"var _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/link.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport FormControl, { Label } from '@codeday/topo/Molecule/FormControl';\nimport { default as Input } from '@codeday/topo/Atom/Input/Text';\nimport Button from '@codeday/topo/Atom/Button';\nimport Page from '../components/page';\nexport default function Home() {\n  const {\n    0: link,\n    1: setLink\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState();\n  const {\n    0: password,\n    1: setPassword\n  } = useState();\n  const {\n    0: initialState,\n    1: setInitialState\n  } = useState();\n  const {\n    0: resultStates,\n    1: setResultStates\n  } = useState();\n  return __jsx(Page, {\n    slug: \"/link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, \"Make Review Link\"), link ? link : __jsx(React.Fragment, null, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, __jsx(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 15\n    }\n  }, \"Password\"), __jsx(Input, {\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, __jsx(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 15\n    }\n  }, \"Initial State\"), __jsx(Input, {\n    value: initialState,\n    onChange: e => setInitialState(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, \"Result States\"), __jsx(Input, {\n    value: resultStates,\n    onChange: e => setResultStates(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    variantColor: \"green\",\n    disabled: loading || !(password && initialState && resultStates),\n    isLoading: loading,\n    onClick: async e => {\n      setLoading(true);\n\n      try {\n        const link = await fetch('/api/link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            password,\n            initialState,\n            finalStates\n          })\n        });\n        setLink(link);\n      } catch (err) {\n        console.error(err);\n      }\n\n      setLoading(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/link.js"],"names":["React","useState","Heading","Content","FormControl","Label","default","Input","Button","Page","Home","link","setLink","loading","setLoading","password","setPassword","initialState","setInitialState","resultStates","setResultStates","e","target","value","fetch","method","headers","body","JSON","stringify","finalStates","err","console","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport FormControl, { Label } from '@codeday/topo/Molecule/FormControl';\nimport { default as Input } from '@codeday/topo/Atom/Input/Text';\nimport Button from '@codeday/topo/Atom/Button';\nimport Page from '../components/page';\n\nexport default function Home() {\n  const [link, setLink] = useState();\n  const [loading, setLoading] = useState();\n  const [password, setPassword] = useState();\n  const [initialState, setInitialState] = useState();\n  const [resultStates, setResultStates] = useState();\n\treturn (\n\t\t<Page slug=\"/link\">\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Make Review Link</Heading>\n        {link ? link : (\n          <>\n            <FormControl>\n              <Label>Password</Label>\n              <Input value={password} onChange={(e) => setPassword(e.target.value)} />\n            </FormControl>\n            <FormControl>\n              <Label>Initial State</Label>\n              <Input value={initialState} onChange={(e) => setInitialState(e.target.value)} />\n            </FormControl>\n            <FormControl>\n              <Label>Result States</Label>\n              <Input value={resultStates} onChange={(e) => setResultStates(e.target.value)} />\n            </FormControl>\n            <Button\n              variantColor=\"green\"\n              disabled={loading || !(password && initialState && resultStates)}\n              isLoading={loading}\n              onClick={async (e) => {\n                setLoading(true);\n                try {\n                  const link = await fetch('/api/link', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ password, initialState, finalStates }),\n                  });\n                  setLink(link);\n                } catch (err) {\n                  console.error(err);\n                }\n                setLoading(false);\n              }}\n            >Submit</Button>\n          </>\n        )}\n\t\t\t</Content>\n\t\t</Page>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}