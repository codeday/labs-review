{"ast":null,"code":"var _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\nconst {\n  serverRuntimeConfig\n} = getConfig();\nexport const getServerSideProps = async ({\n  params: {\n    jwt\n  }\n}, res) => {\n  let resultStates;\n\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return {\n      props: {\n        error: true\n      }\n    };\n  }\n\n  return {\n    props: {\n      jwt,\n      resultStates\n    }\n  };\n};\nexport default function Home({\n  error,\n  jwt\n}) {\n  const {\n    0: entry,\n    1: setEntry\n  } = useState();\n\n  const updateEntry = async () => {\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: {\n        'Content-Type': ''\n      },\n      body: JSON.stringify({\n        jwt\n      })\n    });\n    setEntry(await result.body());\n  };\n\n  useEffect(() => updateEntry(), []);\n  if (error) return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"Not found\")));\n  if (!entry) return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, \"All done for now!\")));\n  return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, entry.Name)));\n}","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js"],"names":["React","useState","useEffect","Heading","Content","getConfig","verify","Page","serverRuntimeConfig","getServerSideProps","params","jwt","res","resultStates","appSecret","err","statusCode","props","error","Home","entry","setEntry","updateEntry","result","fetch","method","headers","body","JSON","stringify","Name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport const getServerSideProps = async ({ params: { jwt } }, res) => {\n  let resultStates;\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return { props: { error: true } };\n  }\n\n  return { props: { jwt, resultStates } };\n}\n\nexport default function Home({ error, jwt }) {\n  const [entry, setEntry] = useState();\n\n  const updateEntry = async () => {\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: { 'Content-Type': '' },\n      body: JSON.stringify({ jwt })\n    });\n    setEntry(await result.body());\n  };\n  useEffect(() => updateEntry(), []);\n\n\tif (error) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Not found</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (!entry) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">All done for now!</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">{entry.Name}</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}