{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Button from '@codeday/topo/Atom/Button';\nimport Page from '../components/page';\nexport var __N_SSP = true;\nexport default function Home(_ref) {\n  _s();\n\n  var _this = this;\n\n  var error = _ref.error,\n      jwt = _ref.jwt,\n      resultStates = _ref.resultStates;\n\n  var _useState = useState(),\n      entry = _useState[0],\n      setEntry = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var updateEntry = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return fetch('/api/get-entry', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  jwt: jwt\n                })\n              });\n\n            case 3:\n              result = _context.sent;\n              _context.t0 = setEntry;\n              _context.next = 7;\n              return result.json();\n\n            case 7:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              setLoading(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateEntry() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    updateEntry();\n  }, []);\n  console.log(entry);\n  if (error) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"Not found\")));\n  if (loading) if (!entry) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, \"All done for now!\")));\n  return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, \"Reviewing #\", entry['Cognito ID']), __jsx(Grid, {\n    templateColumns: \"3fr 1fr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"Judgement\"), resultStates.map(function (state) {\n    return __jsx(Button, {\n      d: \"block\",\n      mb: 2,\n      onClick: function onClick(e) {\n        fetch(\"/api/judge-entry\", {\n          method: 'POST',\n          headers: {\n            'Content-type': 'text/plain'\n          },\n          body: JSON.stringify({\n            jwt: jwt,\n            id: entry.id,\n            state: state\n          })\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, state);\n  })))));\n}\n\n_s(Home, \"hvyw8Rv1pcm07Zn6Bcz073H04l0=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js"],"names":["React","useState","useEffect","Heading","Content","Box","Grid","Button","Page","Home","error","jwt","resultStates","entry","setEntry","loading","setLoading","updateEntry","fetch","method","headers","body","JSON","stringify","result","json","console","log","map","state","e","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Button from '@codeday/topo/Atom/Button';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport const getServerSideProps = async ({ params: { jwt } }, res) => {\n  let resultStates;\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return { props: { error: true } };\n  }\n\n  return { props: { jwt, resultStates: resultStates.split(',') } };\n}\n\nexport default function Home({ error, jwt, resultStates }) {\n  const [entry, setEntry] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const updateEntry = async () => {\n    setLoading(true);\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ jwt })\n    });\n    setEntry(await result.json());\n    setLoading(false);\n  };\n  useEffect(() => { updateEntry(); }, []);\n\n  console.log(entry);\n\n\tif (error) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Not found</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (loading)\n\n  if (!entry) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">All done for now!</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Reviewing #{entry['Cognito ID']}</Heading>\n        <Grid templateColumns=\"3fr 1fr\">\n          <Box>\n\n          </Box>\n          <Box>\n            <Heading as=\"h3\">Judgement</Heading>\n            {resultStates.map((state) => (\n              <Button\n                d=\"block\"\n                mb={2}\n                onClick={(e) => {\n                  fetch(\"/api/judge-entry\", {\n                    method: 'POST',\n                    headers: { 'Content-type': 'text/plain' },\n                    body: JSON.stringify({ jwt, id: entry.id, state }),\n                  })\n                }}\n              >\n                {state}\n              </Button>\n            ))}\n          </Box>\n        </Grid>\n\t\t\t</Content>\n\t\t</Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}