{"ast":null,"code":"var _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Spinner from '@codeday/topo/Atom/Spinner';\nimport Button from '@codeday/topo/Atom/Button';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\nconst {\n  serverRuntimeConfig\n} = getConfig();\nexport const getServerSideProps = async ({\n  params: {\n    jwt\n  }\n}, res) => {\n  let resultStates;\n\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return {\n      props: {\n        error: true\n      }\n    };\n  }\n\n  return {\n    props: {\n      jwt,\n      resultStates: resultStates.split(',')\n    }\n  };\n};\nexport default function Home({\n  error,\n  jwt,\n  resultStates\n}) {\n  const {\n    0: entry,\n    1: setEntry\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const updateEntry = async () => {\n    setLoading(true);\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt\n      })\n    });\n    setEntry(await result.json());\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    updateEntry();\n  }, []);\n  if (error) return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"Not found\")));\n  if (loading) return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }\n  }, __jsx(Box, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))));\n  if (!entry) return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \"All done for now!\")));\n  return __jsx(Page, {\n    slug: `/${jwt}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"Reviewing #\", entry['Cognito ID']), __jsx(Grid, {\n    templateColumns: \"3fr 1fr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    p: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    as: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, Object.keys(entry).filter(key => !['id', 'Cognito ID'].includes(key)).map(key => __jsx(Box, {\n    as: \"tr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    as: \"th\",\n    textAlign: \"right\",\n    verticalAlign: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, key), __jsx(Box, {\n    as: \"td\",\n    pl: 4,\n    pb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, Array.isArray(entry[key]) && __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }\n  }, entry[key].map(item => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 51\n    }\n  }, item))), typeof entry[key] === 'boolean' && (entry[key] ? 'TRUE' : 'FALSE'), typeof entry[key] === 'string' && !Array.isArray(entry[key]) && ['http://', 'https:/'].includes(entry[key].substr(0, 7)) ? __jsx(Button, {\n    as: \"a\",\n    href: entry[key],\n    variant: \"outline\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }, \"Link\") : entry[key]))))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, resultStates.map(state => __jsx(Button, {\n    d: \"block\",\n    mb: 2,\n    onClick: async e => {\n      setLoading(true);\n      await fetch(\"/api/judge-entry\", {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          jwt,\n          id: entry.id,\n          state\n        })\n      });\n      updateEntry();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, state))))));\n}","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js"],"names":["React","useState","useEffect","Heading","Content","Box","Grid","Spinner","Button","getConfig","verify","Page","serverRuntimeConfig","getServerSideProps","params","jwt","res","resultStates","appSecret","err","statusCode","props","error","split","Home","entry","setEntry","loading","setLoading","updateEntry","result","fetch","method","headers","body","JSON","stringify","json","Object","keys","filter","key","includes","map","Array","isArray","item","substr","state","e","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,GAAP,IAAcC,IAAd,QAA0B,wBAA1B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BH,SAAS,EAAzC;AAEA,OAAO,MAAMI,kBAAkB,GAAG,OAAO;AAAEC,EAAAA,MAAM,EAAE;AAAEC,IAAAA;AAAF;AAAV,CAAP,EAA4BC,GAA5B,KAAoC;AACpE,MAAIC,YAAJ;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGP,MAAM,CAACK,GAAD,EAAMH,mBAAmB,CAACM,SAA1B,CAAN,CAA2CD,YAA1D;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZH,IAAAA,GAAG,CAACI,UAAJ,GAAiB,GAAjB;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAT,KAAP;AACD;;AAED,SAAO;AAAED,IAAAA,KAAK,EAAE;AAAEN,MAAAA,GAAF;AAAOE,MAAAA,YAAY,EAAEA,YAAY,CAACM,KAAb,CAAmB,GAAnB;AAArB;AAAT,GAAP;AACD,CAVM;AAYP,eAAe,SAASC,IAAT,CAAc;AAAEF,EAAAA,KAAF;AAASP,EAAAA,GAAT;AAAcE,EAAAA;AAAd,CAAd,EAA4C;AACzD,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBzB,QAAQ,EAAlC;AACA,QAAM;AAAA,OAAC0B,OAAD;AAAA,OAAUC;AAAV,MAAwB3B,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAM4B,WAAW,GAAG,YAAY;AAC9BD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAME,MAAM,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAmB;AAC3CC,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFkC;AAG3CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAErB,QAAAA;AAAF,OAAf;AAHqC,KAAnB,CAA1B;AAKAW,IAAAA,QAAQ,CAAC,MAAMI,MAAM,CAACO,IAAP,EAAP,CAAR;AACAT,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GATD;;AAUA1B,EAAAA,SAAS,CAAC,MAAM;AAAE2B,IAAAA,WAAW;AAAK,GAAzB,EAA2B,EAA3B,CAAT;AAED,MAAIP,KAAJ,EAAW,OACV,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,IAAGP,GAAI,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,CADD,CADU;AAQV,MAAIY,OAAJ,EAAa,OACb,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,IAAGZ,GAAI,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADL,CADD,CADa;AAUb,MAAI,CAACU,KAAL,EAAY,OACZ,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,IAAGV,GAAI,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,CADD,CADY;AAQZ,SACA,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,IAAGA,GAAI,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA+DU,KAAK,CAAC,YAAD,CAApE,CADD,EAEK,MAAC,IAAD;AAAM,IAAA,eAAe,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAE,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,MAAM,CAACC,IAAP,CAAYd,KAAZ,EAAmBe,MAAnB,CAA2BC,GAAD,IAAS,CAAC,CAAC,IAAD,EAAO,YAAP,EAAqBC,QAArB,CAA8BD,GAA9B,CAApC,EAAwEE,GAAxE,CAA6EF,GAAD,IAC3E,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,SAAS,EAAC,OAAvB;AAA+B,IAAA,aAAa,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDA,GAApD,CADF,EAEE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAE,CAAjB;AAAoB,IAAA,EAAE,EAAE,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,KAAK,CAACC,OAAN,CAAcpB,KAAK,CAACgB,GAAD,CAAnB,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,KAAK,CAACgB,GAAD,CAAL,CAAWE,GAAX,CAAgBG,IAAD,IAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAL,CAAzB,CADH,CAFJ,EAMG,OAAOrB,KAAK,CAACgB,GAAD,CAAZ,KAAsB,SAAtB,KAAoChB,KAAK,CAACgB,GAAD,CAAL,GAAa,MAAb,GAAsB,OAA1D,CANH,EAOI,OAAOhB,KAAK,CAACgB,GAAD,CAAZ,KAAsB,QAAtB,IAAkC,CAACG,KAAK,CAACC,OAAN,CAAcpB,KAAK,CAACgB,GAAD,CAAnB,CAApC,IAAkE,CAAC,SAAD,EAAY,SAAZ,EAAuBC,QAAvB,CAAgCjB,KAAK,CAACgB,GAAD,CAAL,CAAWM,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAhC,CAAlE,GACC,MAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,GAAX;AAAe,IAAA,IAAI,EAAEtB,KAAK,CAACgB,GAAD,CAA1B;AAAiC,IAAA,OAAO,EAAC,SAAzC;AAAmD,IAAA,MAAM,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAEGhB,KAAK,CAACgB,GAAD,CATX,CAFF,CADD,CADH,CADF,CADF,EAqBE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,YAAY,CAAC0B,GAAb,CAAkBK,KAAD,IAChB,MAAC,MAAD;AACE,IAAA,CAAC,EAAC,OADJ;AAEE,IAAA,EAAE,EAAE,CAFN;AAGE,IAAA,OAAO,EAAE,MAAOC,CAAP,IAAa;AACpBrB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMG,KAAK,CAAC,kBAAD,EAAqB;AAC9BC,QAAAA,MAAM,EAAE,MADsB;AAE9BC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFqB;AAG9BC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAErB,UAAAA,GAAF;AAAOmC,UAAAA,EAAE,EAAEzB,KAAK,CAACyB,EAAjB;AAAqBF,UAAAA;AAArB,SAAf;AAHwB,OAArB,CAAX;AAKAnB,MAAAA,WAAW;AACZ,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGmB,KAbH,CADD,CADH,CArBF,CAFL,CADD,CADA;AAgDD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Spinner from '@codeday/topo/Atom/Spinner';\nimport Button from '@codeday/topo/Atom/Button';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport const getServerSideProps = async ({ params: { jwt } }, res) => {\n  let resultStates;\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return { props: { error: true } };\n  }\n\n  return { props: { jwt, resultStates: resultStates.split(',') } };\n}\n\nexport default function Home({ error, jwt, resultStates }) {\n  const [entry, setEntry] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const updateEntry = async () => {\n    setLoading(true);\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ jwt })\n    });\n    setEntry(await result.json());\n    setLoading(false);\n  };\n  useEffect(() => { updateEntry(); }, []);\n\n\tif (error) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Not found</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (loading) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n        <Box textAlign=\"center\">\n          <Spinner />\n        </Box>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (!entry) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">All done for now!</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Reviewing #{entry['Cognito ID']}</Heading>\n        <Grid templateColumns=\"3fr 1fr\">\n          <Box p={8}>\n            <Box as=\"table\">\n              {Object.keys(entry).filter((key) => !['id', 'Cognito ID'].includes(key)).map((key) => (\n                <Box as=\"tr\">\n                  <Box as=\"th\" textAlign=\"right\" verticalAlign=\"top\">{key}</Box>\n                  <Box as=\"td\" pl={4} pb={4}>\n                    {Array.isArray(entry[key]) && (\n                      <ul>\n                        {entry[key].map((item) => <li>{item}</li>)}\n                      </ul>\n                    )}\n                    {typeof entry[key] === 'boolean' && (entry[key] ? 'TRUE' : 'FALSE')}\n                    {(typeof entry[key] === 'string' && !Array.isArray(entry[key])) && ['http://', 'https:/'].includes(entry[key].substr(0, 7)) ? (\n                      <Button as=\"a\" href={entry[key]} variant=\"outline\" target=\"_blank\">Link</Button>\n                    ) : entry[key]}\n                  </Box>\n                </Box>\n              ))}\n            </Box>\n          </Box>\n          <Box>\n            {resultStates.map((state) => (\n              <Button\n                d=\"block\"\n                mb={2}\n                onClick={async (e) => {\n                  setLoading(true);\n                  await fetch(\"/api/judge-entry\", {\n                    method: 'POST',\n                    headers: { 'Content-type': 'application/json' },\n                    body: JSON.stringify({ jwt, id: entry.id, state }),\n                  });\n                  updateEntry();\n                }}\n              >\n                {state}\n              </Button>\n            ))}\n          </Box>\n        </Grid>\n\t\t\t</Content>\n\t\t</Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}