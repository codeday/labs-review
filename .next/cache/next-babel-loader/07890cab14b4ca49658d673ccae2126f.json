{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Page from '../components/page';\nexport var __N_SSP = true;\nexport default function Home(_ref) {\n  _s();\n\n  var error = _ref.error,\n      jwt = _ref.jwt;\n\n  var _useState = useState(),\n      entry = _useState[0],\n      setEntry = _useState[1];\n\n  var updateEntry = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/get-entry', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': ''\n                },\n                body: JSON.stringify({\n                  jwt: jwt\n                })\n              });\n\n            case 2:\n              result = _context.sent;\n              _context.t0 = setEntry;\n              _context.next = 6;\n              return result.body();\n\n            case 6:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateEntry() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    return updateEntry();\n  }, []);\n  if (error) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"Not found\")));\n  if (!entry) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, \"All done for now!\")));\n  return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, entry.Name)));\n}\n\n_s(Home, \"6ZhD3HOdcA/Uaqeizn934tAx87o=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js"],"names":["React","useState","useEffect","Heading","Content","Page","Home","error","jwt","entry","setEntry","updateEntry","fetch","method","headers","body","JSON","stringify","result","Name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AAGA,OAAOC,IAAP,MAAiB,oBAAjB;;AAgBA,eAAe,SAASC,IAAT,OAA8B;AAAA;;AAAA,MAAdC,KAAc,QAAdA,KAAc;AAAA,MAAPC,GAAO,QAAPA,GAAO;;AAAA,kBACjBP,QAAQ,EADS;AAAA,MACpCQ,KADoC;AAAA,MAC7BC,QAD6B;;AAG3C,MAAMC,WAAW;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACGC,KAAK,CAAC,gBAAD,EAAmB;AAC3CC,gBAAAA,MAAM,EAAE,MADmC;AAE3CC,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB,iBAFkC;AAG3CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,kBAAAA,GAAG,EAAHA;AAAF,iBAAf;AAHqC,eAAnB,CADR;;AAAA;AACZU,cAAAA,MADY;AAAA,4BAMlBR,QANkB;AAAA;AAAA,qBAMHQ,MAAM,CAACH,IAAP,EANG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXJ,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAQAT,EAAAA,SAAS,CAAC;AAAA,WAAMS,WAAW,EAAjB;AAAA,GAAD,EAAsB,EAAtB,CAAT;AAED,MAAIJ,KAAJ,EAAW,OACV,MAAC,IAAD;AAAM,IAAA,IAAI,aAAMC,GAAN,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,CADD,CADU;AAQV,MAAI,CAACC,KAAL,EAAY,OACZ,MAAC,IAAD;AAAM,IAAA,IAAI,aAAMD,GAAN,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,CADD,CADY;AAQZ,SACA,MAAC,IAAD;AAAM,IAAA,IAAI,aAAMA,GAAN,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,QAAQ,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDC,KAAK,CAACU,IAA1D,CADD,CADD,CADA;AAOD;;GApCuBb,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport const getServerSideProps = async ({ params: { jwt } }, res) => {\n  let resultStates;\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return { props: { error: true } };\n  }\n\n  return { props: { jwt, resultStates } };\n}\n\nexport default function Home({ error, jwt }) {\n  const [entry, setEntry] = useState();\n\n  const updateEntry = async () => {\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: { 'Content-Type': '' },\n      body: JSON.stringify({ jwt })\n    });\n    setEntry(await result.body());\n  };\n  useEffect(() => updateEntry(), []);\n\n\tif (error) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Not found</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (!entry) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">All done for now!</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">{entry.Name}</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}