{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getConfig from 'next/config';\nimport Airtable from 'airtable';\nimport { verify } from 'jsonwebtoken';\nconst {\n  serverRuntimeConfig\n} = getConfig();\nexport default (async (req, res) => {\n  const {\n    base,\n    table,\n    initialState\n  } = verify(req.body.jwt, serverRuntimeConfig.appSecret);\n  const at = new Airtable({\n    apiKey: serverRuntimeConfig.airtableKey\n  }).base(base)(table);\n  const result = await (await at.select({\n    maxRecords: 1,\n    filterByFormula: `{Status} = '${initialState}'`,\n    sort: [{\n      field: \"Cognito ID\",\n      direction: \"asc\"\n    }],\n    fields: [\"Track\", \"Timezone\", \"Prior Experience\", \"Interests\", \"Past Project\", \"Anything Else\", \"LinkedIn\", \"Resume\", \"Student Type\", \"School\", \"Underrepresented\", \"Cognito ID\"]\n  })).firstPage();\n  if (result.length === 0) return res.send(null);\n  return res.send(_objectSpread({\n    id: result[0].id\n  }, result[0].fields));\n});","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/api/get-entry.js"],"names":["getConfig","Airtable","verify","serverRuntimeConfig","req","res","base","table","initialState","body","jwt","appSecret","at","apiKey","airtableKey","result","select","maxRecords","filterByFormula","sort","field","direction","fields","firstPage","length","send","id"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BH,SAAS,EAAzC;AAEA,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAgCN,MAAM,CAACE,GAAG,CAACK,IAAJ,CAASC,GAAV,EAAeP,mBAAmB,CAACQ,SAAnC,CAA5C;AACA,QAAMC,EAAE,GAAG,IAAIX,QAAJ,CAAa;AAAEY,IAAAA,MAAM,EAAEV,mBAAmB,CAACW;AAA9B,GAAb,EAA0DR,IAA1D,CAA+DA,IAA/D,EAAqEC,KAArE,CAAX;AACA,QAAMQ,MAAM,GAAG,MAAM,CAAC,MAAMH,EAAE,CAACI,MAAH,CAAU;AACpCC,IAAAA,UAAU,EAAE,CADwB;AAEpCC,IAAAA,eAAe,EAAG,eAAcV,YAAa,GAFT;AAGpCW,IAAAA,IAAI,EAAE,CAAC;AAACC,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,SAAS,EAAE;AAAjC,KAAD,CAH8B;AAIpCC,IAAAA,MAAM,EAAE,CACN,OADM,EAEN,UAFM,EAGN,kBAHM,EAIN,WAJM,EAKN,cALM,EAMN,eANM,EAON,UAPM,EAQN,QARM,EASN,cATM,EAUN,QAVM,EAWN,kBAXM,EAYN,YAZM;AAJ4B,GAAV,CAAP,EAkBjBC,SAlBiB,EAArB;AAmBA,MAAIR,MAAM,CAACS,MAAP,KAAkB,CAAtB,EAAyB,OAAOnB,GAAG,CAACoB,IAAJ,CAAS,IAAT,CAAP;AACzB,SAAOpB,GAAG,CAACoB,IAAJ;AACLC,IAAAA,EAAE,EAAEX,MAAM,CAAC,CAAD,CAAN,CAAUW;AADT,KAEFX,MAAM,CAAC,CAAD,CAAN,CAAUO,MAFR,EAAP;AAID,CA3BD","sourcesContent":["import getConfig from 'next/config';\nimport Airtable from 'airtable';\nimport { verify } from 'jsonwebtoken';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport default async (req, res) => {\n  const { base, table, initialState } = verify(req.body.jwt, serverRuntimeConfig.appSecret);\n  const at = new Airtable({ apiKey: serverRuntimeConfig.airtableKey }).base(base)(table);\n  const result = await (await at.select({\n    maxRecords: 1,\n    filterByFormula: `{Status} = '${initialState}'`,\n    sort: [{field: \"Cognito ID\", direction: \"asc\"}],\n    fields: [\n      \"Track\",\n      \"Timezone\",\n      \"Prior Experience\",\n      \"Interests\",\n      \"Past Project\",\n      \"Anything Else\",\n      \"LinkedIn\",\n      \"Resume\",\n      \"Student Type\",\n      \"School\",\n      \"Underrepresented\",\n      \"Cognito ID\",\n    ]\n  })).firstPage();\n  if (result.length === 0) return res.send(null);\n  return res.send({\n    id: result[0].id,\n    ...result[0].fields,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}