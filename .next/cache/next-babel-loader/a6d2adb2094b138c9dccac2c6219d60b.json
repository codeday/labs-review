{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Text, { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Spinner from '@codeday/topo/Atom/Spinner';\nimport Button from '@codeday/topo/Atom/Button';\nimport Page from '../components/page';\nexport var __N_SSP = true;\nexport default function Home(_ref) {\n  _s();\n\n  var _this = this;\n\n  var error = _ref.error,\n      jwt = _ref.jwt,\n      resultStates = _ref.resultStates;\n\n  var _useState = useState(),\n      entry = _useState[0],\n      setEntry = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var updateEntry = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return fetch('/api/get-entry', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  jwt: jwt\n                })\n              });\n\n            case 3:\n              result = _context.sent;\n              _context.t0 = setEntry;\n              _context.next = 7;\n              return result.json();\n\n            case 7:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              setLoading(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateEntry() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    updateEntry();\n  }, []);\n  if (error) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"Not found\")));\n  if (loading) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }\n  }, __jsx(Box, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))));\n  if (!entry) return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \"All done for now!\")));\n  return __jsx(Page, {\n    slug: \"/\".concat(jwt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, __jsx(Heading, {\n    as: \"h2\",\n    fontSize: \"5xl\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"Reviewing #\", entry['Cognito ID']), __jsx(Grid, {\n    templateColumns: \"3fr 1fr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    p: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    as: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, Object.keys(entry).filter(function (key) {\n    return !['id', 'Cognito ID'].includes(key);\n  }).map(function (key) {\n    return __jsx(Box, {\n      as: \"tr\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      as: \"th\",\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, key), __jsx(Box, {\n      as: \"td\",\n      pl: 4,\n      pb: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }\n    }, Array.isArray(entry[key]) && __jsx(\"ul\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }\n    }, entry[key].map(function (item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 51\n        }\n      }, item);\n    })), typeof entry[key] === 'boolean' && (entry[key] ? 'TRUE' : 'FALSE'), typeof entry[key] === 'string' && !Array.isArray(entry[key]) && (['http://', 'https:/'].includes(entry[key].substr(0, 7)) ? __jsx(Button, {\n      as: \"a\",\n      href: entry[key],\n      variant: \"outline\",\n      target: \"_blank\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }\n    }, \"Link\") : entry[key])));\n  }))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Judgement\"), __jsx(Heading, {\n    as: \"h4\",\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Positives\"), __jsx(Box, {\n    as: \"ul\",\n    pb: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"Have the experience to succeed in this track.\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"Have little access to other opportunities.\")), __jsx(Box, {\n    as: \"ul\",\n    pb: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, \"Likely to succeed either way.\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, \"Lots of previous industry experience.\")), resultStates.map(function (state) {\n    return __jsx(Button, {\n      d: \"block\",\n      mb: 2,\n      onClick: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  setLoading(true);\n                  _context2.next = 3;\n                  return fetch(\"/api/judge-entry\", {\n                    method: 'POST',\n                    headers: {\n                      'Content-type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                      jwt: jwt,\n                      id: entry.id,\n                      state: state\n                    })\n                  });\n\n                case 3:\n                  updateEntry();\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, state);\n  })))));\n}\n\n_s(Home, \"hvyw8Rv1pcm07Zn6Bcz073H04l0=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/x/VCS/github.com/codeday/labs-review/src/pages/[jwt].js"],"names":["React","useState","useEffect","Text","Heading","Content","Box","Grid","Spinner","Button","Page","Home","error","jwt","resultStates","entry","setEntry","loading","setLoading","updateEntry","fetch","method","headers","body","JSON","stringify","result","json","Object","keys","filter","key","includes","map","Array","isArray","item","substr","state","e","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Text, { Heading } from '@codeday/topo/Atom/Text';\nimport Content from '@codeday/topo/Molecule/Content';\nimport Box, { Grid } from '@codeday/topo/Atom/Box';\nimport Spinner from '@codeday/topo/Atom/Spinner';\nimport Button from '@codeday/topo/Atom/Button';\nimport getConfig from 'next/config';\nimport { verify } from 'jsonwebtoken';\nimport Page from '../components/page';\n\nconst { serverRuntimeConfig } = getConfig();\n\nexport const getServerSideProps = async ({ params: { jwt } }, res) => {\n  let resultStates;\n  try {\n    resultStates = verify(jwt, serverRuntimeConfig.appSecret).resultStates;\n  } catch (err) {\n    res.statusCode = 404;\n    return { props: { error: true } };\n  }\n\n  return { props: { jwt, resultStates: resultStates.split(',') } };\n}\n\nexport default function Home({ error, jwt, resultStates }) {\n  const [entry, setEntry] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const updateEntry = async () => {\n    setLoading(true);\n    const result = await fetch('/api/get-entry', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ jwt })\n    });\n    setEntry(await result.json());\n    setLoading(false);\n  };\n  useEffect(() => { updateEntry(); }, []);\n\n\tif (error) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Not found</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (loading) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n        <Box textAlign=\"center\">\n          <Spinner />\n        </Box>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  if (!entry) return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">All done for now!</Heading>\n\t\t\t</Content>\n\t\t</Page>\n  );\n\n  return (\n\t\t<Page slug={`/${jwt}`}>\n\t\t\t<Content>\n\t\t\t\t<Heading as=\"h2\" fontSize=\"5xl\" textAlign=\"center\">Reviewing #{entry['Cognito ID']}</Heading>\n        <Grid templateColumns=\"3fr 1fr\">\n          <Box p={8}>\n            <Box as=\"table\">\n              {Object.keys(entry).filter((key) => !['id', 'Cognito ID'].includes(key)).map((key) => (\n                <Box as=\"tr\">\n                  <Box as=\"th\" textAlign=\"right\" verticalAlign=\"top\">{key}</Box>\n                  <Box as=\"td\" pl={4} pb={4}>\n                    {Array.isArray(entry[key]) && (\n                      <ul>\n                        {entry[key].map((item) => <li>{item}</li>)}\n                      </ul>\n                    )}\n                    {typeof entry[key] === 'boolean' && (entry[key] ? 'TRUE' : 'FALSE')}\n                    {(typeof entry[key] === 'string' && !Array.isArray(entry[key])) && (['http://', 'https:/'].includes(entry[key].substr(0, 7)) ? (\n                      <Button as=\"a\" href={entry[key]} variant=\"outline\" target=\"_blank\">Link</Button>\n                    ) : entry[key])}\n                  </Box>\n                </Box>\n              ))}\n            </Box>\n          </Box>\n          <Box>\n            <Heading as=\"h3\">Judgement</Heading>\n            <Heading as=\"h4\" size=\"md\">Positives</Heading>\n            <Box as=\"ul\" pb={8}>\n              <li>Have the experience to succeed in this track.</li>\n              <li>Have little access to other opportunities.</li>\n            </Box>\n            <Box as=\"ul\" pb={8}>\n              <li>Likely to succeed either way.</li>\n              <li>Lots of previous industry experience.</li>\n            </Box>\n            {resultStates.map((state) => (\n              <Button\n                d=\"block\"\n                mb={2}\n                onClick={async (e) => {\n                  setLoading(true);\n                  await fetch(\"/api/judge-entry\", {\n                    method: 'POST',\n                    headers: { 'Content-type': 'application/json' },\n                    body: JSON.stringify({ jwt, id: entry.id, state }),\n                  });\n                  updateEntry();\n                }}\n              >\n                {state}\n              </Button>\n            ))}\n          </Box>\n        </Grid>\n\t\t\t</Content>\n\t\t</Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}